// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mediaDecoding.proto

package mediaDecoding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaDecodingServiceClient is the client API for MediaDecodingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaDecodingServiceClient interface {
	StartVideoCutting(ctx context.Context, in *VideoCuttingRequest, opts ...grpc.CallOption) (MediaDecodingService_StartVideoCuttingClient, error)
}

type mediaDecodingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaDecodingServiceClient(cc grpc.ClientConnInterface) MediaDecodingServiceClient {
	return &mediaDecodingServiceClient{cc}
}

func (c *mediaDecodingServiceClient) StartVideoCutting(ctx context.Context, in *VideoCuttingRequest, opts ...grpc.CallOption) (MediaDecodingService_StartVideoCuttingClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaDecodingService_ServiceDesc.Streams[0], "/mediaDecoding.mediaDecodingService/StartVideoCutting", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaDecodingServiceStartVideoCuttingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MediaDecodingService_StartVideoCuttingClient interface {
	Recv() (*VideoCuttingResponse, error)
	grpc.ClientStream
}

type mediaDecodingServiceStartVideoCuttingClient struct {
	grpc.ClientStream
}

func (x *mediaDecodingServiceStartVideoCuttingClient) Recv() (*VideoCuttingResponse, error) {
	m := new(VideoCuttingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaDecodingServiceServer is the server API for MediaDecodingService service.
// All implementations must embed UnimplementedMediaDecodingServiceServer
// for forward compatibility
type MediaDecodingServiceServer interface {
	StartVideoCutting(*VideoCuttingRequest, MediaDecodingService_StartVideoCuttingServer) error
	mustEmbedUnimplementedMediaDecodingServiceServer()
}

// UnimplementedMediaDecodingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaDecodingServiceServer struct {
}

func (UnimplementedMediaDecodingServiceServer) StartVideoCutting(*VideoCuttingRequest, MediaDecodingService_StartVideoCuttingServer) error {
	return status.Errorf(codes.Unimplemented, "method StartVideoCutting not implemented")
}
func (UnimplementedMediaDecodingServiceServer) mustEmbedUnimplementedMediaDecodingServiceServer() {}

// UnsafeMediaDecodingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaDecodingServiceServer will
// result in compilation errors.
type UnsafeMediaDecodingServiceServer interface {
	mustEmbedUnimplementedMediaDecodingServiceServer()
}

func RegisterMediaDecodingServiceServer(s grpc.ServiceRegistrar, srv MediaDecodingServiceServer) {
	s.RegisterService(&MediaDecodingService_ServiceDesc, srv)
}

func _MediaDecodingService_StartVideoCutting_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoCuttingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaDecodingServiceServer).StartVideoCutting(m, &mediaDecodingServiceStartVideoCuttingServer{stream})
}

type MediaDecodingService_StartVideoCuttingServer interface {
	Send(*VideoCuttingResponse) error
	grpc.ServerStream
}

type mediaDecodingServiceStartVideoCuttingServer struct {
	grpc.ServerStream
}

func (x *mediaDecodingServiceStartVideoCuttingServer) Send(m *VideoCuttingResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MediaDecodingService_ServiceDesc is the grpc.ServiceDesc for MediaDecodingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaDecodingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaDecoding.mediaDecodingService",
	HandlerType: (*MediaDecodingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartVideoCutting",
			Handler:       _MediaDecodingService_StartVideoCutting_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mediaDecoding.proto",
}
